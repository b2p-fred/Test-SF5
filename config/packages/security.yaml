security:
  # https://symfony.com/doc/current/security/experimental_authenticators.html
  enable_authenticator_manager: true

  role_hierarchy:
    ROLE_ADMIN: ROLE_USER
    ROLE_SUPER_ADMIN: [ ROLE_USER, ROLE_ADMIN ]

  password_hashers:
    App\Entity\User:
      algorithm: auto

  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    # used to reload user from session & other features (e.g., switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/api/login_check
      stateless: true
      provider: app_user_provider

      json_login:
        check_path: /api/login_check
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api:
      pattern: ^/api/
      stateless: true
      provider: app_user_provider
      jwt: ~

    main:
      lazy: true
      provider: app_user_provider

      custom_authenticator:
        - App\Security\LoginFormAuthenticator
        - App\Security\ApiLoginAuthenticator

      json_login:
        check_path: /api/login
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

      # configure the maximum login attempts in a custom period of time
      login_throttling:
        max_attempts: 3
        interval: '15 minutes'

      logout:
        path: /logout
        target: /

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # API anonymous routes
    - { path: '^/api', roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: '^/api/docs', roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: '^/api/version', roles: IS_AUTHENTICATED_ANONYMOUSLY }

    # API authenticated routes
    - { path: '^/api/', roles: IS_AUTHENTICATED_FULLY }

    # SSR application
#        # require ROLE_ADMIN for /admin*
#        - { path: '^/admin', roles: ROLE_ADMIN }
#
#        # OR require ROLE_ADMIN or IS_AUTHENTICATED_FULLY for /admin*
#        - { path: '^/admin', roles: [ IS_AUTHENTICATED_FULLY, ROLE_ADMIN ] }
##
##        # the 'path' value can be any valid regular expression
##        # (this one will match URLs like /api/post/7298 and /api/comment/528491)
##        - { path: ^/api/(post|comment)/\d+$, roles: ROLE_USER }