# https://help.github.com/en/actions
name: Setup and tests

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop
      
env:
  DATABASE_HOST: mariadb
  DATABASE_PORT: 3306
  DATABASE_NAME: sf5_test
  DATABASE_USER: sf5_test
  DATABASE_PASSWORD: sf5_test
  DATABASE_ROOT_USER: root
  DATABASE_ROOT_PASSWORD: secret
  DATABASE_NAME_SUFFIX: ""
  # Do not send mails from the application under test
  MAILER_DSN: null://null

jobs:
  setup:
    name: Setup and unit/functional tests (${{ matrix.os-versions }} with Php ${{ matrix.php-versions }} and Symfony ${{ matrix.symfony-versions }})
    # https://hub.docker.com/_/ubuntu/
    runs-on: ${{ matrix.os-versions }}

    services:
      # MariaDB
      database:
        image: mariadb:10.5.11
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.DATABASE_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.DATABASE_NAME }}
          MYSQL_USER: ${{ env.DATABASE_USER }}
          MYSQL_PASSWORD: ${{ env.DATABASE_PASSWORD }}
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    strategy:
      fail-fast: true
      matrix:
        os-versions: [ ubuntu-latest ] #, windows-latest ]
        php-versions: ['7.4', '8.0']
        symfony-versions: ['5.3']

    steps:
      # —— Setup repository ———————————————————————————————————————————————————
      - name: Checkout
        uses: actions/checkout@v2

      # —— Setup PHP & extensions —————————————————————————————————————————————
      - name: Setup PHP, extensions and composer with shivammathur/setup-php
        id: setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json
          tools: composer:2.1, phpcs:3.6, phpstan:0.12, phpunit:9.5, behat:3.8, symfony:4.25
          coverage: pcov
          ini-values: date.timezone=UTC
        env:
          update: true
          fail-fast: true

      - name: Print PHP version
        run: echo ${{ steps.setup-php.outputs.php-version }}

      # —— Composer ———————————————————————————————————————————————————————————
      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v2.1.6
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress

      # —— Symfony ————————————————————————————————————————————————————————————
      - name: Check Symfony requirements & security
        run: |
          symfony check:requirements
          symfony check:security

      - name: Check the Symfony console and dump environment variables
        run: |
          symfony console about
          symfony var:export --multiline


      # —— Coding standards ———————————————————————————————————————————————————
      - name: Coding standards checks (php-cs-fixer)
        run: composer lint-fix
        # Can't handle PHP8 for now
        if: matrix.php-versions == '7.4'

      # —— Static analysis ————————————————————————————————————————————————————
      - name: Static analysis of PHP code (PHPStan)
        run: composer phpstan
        # Can't handle PHP8 for now
        if: matrix.php-versions == '7.4'

      # —— MariaDB ————————————————————————————————————————————————————————————
      - name: Verify database connection
        # Do not run this locally... it fails!
        if: ${{ !env.ACT }}
        env:
          PORT: ${{ job.services.database.ports[3306] }}
          DATABASE_URL: mysql://${{ env.DATABASE_ROOT_USER }}:${{ env.DATABASE_ROOT_PASSWORD }}@${{ env.DATABASE_HOST }}:${{ env.DATABASE_PORT }}/${{ env.DATABASE_NAME }}?serverVersion=mariadb-10.5.11

        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
            sleep 1
          done

      # —— Prepare the application ————————————————————————————————————————————
      - name: Prepare the application
        run: |
            # Build the environment configuration
            php -r "file_exists('.env') || copy('.env.dist', '.env');"
            printenv
            # Generate SSL keys for the JWT Token
            symfony console lexik:jwt:generate-keypair

      # —— Prepare the database ———————————————————————————————————————————————
      - name: Create the database and load some test fixtures
        env:
          DATABASE_HOST: 127.0.0.1
        run: |
          symfony console doctrine:database:drop --force
          symfony console doctrine:database:create
          symfony console doctrine:migrations:migrate --no-interaction -vv
          symfony console doctrine:schema:validate
          symfony console hautelook:fixtures:load --no-interaction -vv

      # —— Run the tests ——————————————————————————————————————————————————————
      - name: Run all tests suites with code coverage measurement
        env:
          DATABASE_HOST: 127.0.0.1
        run: |
          composer tests-utils-coverage
          composer tests-unit-coverage
          composer tests-api-coverage
          composer tests-app-coverage

      - name: Upload tests results
        uses: actions/upload-artifact@v2
        with:
          name: tests-coverage-reports
          path: artifacts/coverage-*.xml
          if-no-files-found: error

      # —— Upload the tests' coverage —————————————————————————————————————————
      - name: Upload unit tests code coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./artifacts/coverage-utils.xml,./artifacts/coverage-unit.xml
          flags: backend-unit-tests
          env_vars: OS,PHP
          name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: false

      - name: Upload functional tests code coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./artifacts/coverage-api.xml
          flags: backend-api-tests
          env_vars: OS,PHP
          name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: false

      - name: Upload application tests code coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./artifacts/coverage-app.xml
          flags: backend-app-tests
          env_vars: OS,PHP
          name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: false
